import React, {useState} from "react";
import TutorialsPage from "./pages/TutorialsPage";
import HomePage from "./pages/HomePage";
import {Route, Routes, useLocation} from "react-router-dom";
import NotfoundPage from "./pages/NotfoundPage";
import LoginPage from "./pages/LoginPage";
import TopicPage from "./pages/TopicPage";
import TopBar from "./components/TopBar";
import './index.css'
import RegisterPage from "./pages/RegisterPage";


const courses = [
    {
        topic: "Python тілінің синтаксисі",
        description: "Көптеген басқа бағдарламалау тілдерімен бірге, Python тілі де орфографиялық синтаксис ретінде латын тілін қабылдайды. \\nБірақ сонымен қатар, оны басқа тілдерден ажырататын Python-ның қызықты синтаксистік ерекшеліктерінің бірі – код бөліктерінің (блоктардың) басы мен соңын бос орын (пробел немесе табуляция) арқылы ажырату. Яғни, Python-да Паскаль тіліндегідей операторлық жақшалар (“begin” , “end”) немесе C-дегі сияқты фигуралық жақшалар (“{“ , “}”) жоқ. Басқаша айтқанда, бағдарламашы код блоктарының басы мен соңын көре алмайды. \\nБұндай синтаксистік ерекшелік бағдарламадағы жолдар мен таңбалардың санын азайтуға мүмкіндік беріп, жүйелеп реттелген бағдарламалау стиліне үйретеді. \\nКері жағынан, блоктардың басталуы мен аяқталуын анық көрсететін тілдерде бағдарламалауға үйренгендер үшін бұл ерекшелік бастапқыда ыңғайсыз болып көрінуі мүмкін.",
        tutorials:
            [
                {
                    name: "Шығару",
                    description: "Python-дағы бірінші және ең қарапайым функция, сондай-ақ тапсырмалардың шешім нәтижелерінің көрсеткіші ретінде негізгі деректерді шығаруға жауап беретін print() функциясы қолданылады.",
                    syntax:
                        {
                            explanation: "Түсіндірме: print() функциясы мәтін жолын консольге шығарады.",
                            code: "#Синтаксис: жақшаның ішіне шығарылатын мән немесе айнымалы жазылады. \\nprint (“Hello, World!”) \\n#немесе \\na = 5 \\nprint(a)"
                        },
                },
                {
                    name: "Енгізу",
                    description: "Әрбір жоспарланған және жұмыс істейтін алгоритм әмбебап болу керек, яғни ол тек бір мәндермен ғана емес, түрлі енгізілген айнымалылармен жұмыс істеу қажет. Оны енгізу процессі арқылы тексеруге болады, Python тілінде ол үшін input() функциясы қолданылады.",
                    syntax:
                        {
                            explanation: "Түсіндірме: input() функциясы консоль арқылы деректерді енгізуге мүмкіндік береді. ",
                            code: "#Синтаксис: функция айнымалы мәні ретінді жазылады, ал бағдарлама іске қосылғанда, қолданушы деректерді енгізе алады. Бірақ Python тілінде енгізілген деректер автоматты түрде мәтін ретінде қабылданады, сондықтан егер бізге басқа дерек типі керек болса, функцияның алдына дерек типі жазылады.\\na = input() #әрбір жазылған символды мәтін ретінде қабылдайды \\n#немесе \\nb = int(input()) #жазылған деректерді тек бүтін сан ретінде қабылдайды"
                        },
                }
            ]
    },
    {
        topic: "Айнымалылар",
        description: "Кез-келген басқа бағдарлама сияқты, Python белгілі бір деректерді сақтайтын айнымалылармен жұмыс істеп, оларды көпмақсатты есептерде қолданады. \\nКез-келген деректің өзінің типі болады, мысалы. ол сан, белгі, мәтін немесе шындық пен жалған анықтамасы болуы мүмкін. \\nPython толығымен объектілі бағытталған бағдарламалау тілі болып табылады, сондықтан қолданар алдында айнымалылар мен олардың типін жариялаудың қажеті жоқ. Python-дағы әрбір айнымалы - бұл объект. \\nБұл нұсқаулықта біз айнымалылардың бірнеше негізгі типтерін қарастырамыз.",
        syntax:
            {
                explanation: "Түсіндірме: айнымалы — деректерге қол жеткізу және бағдарламаны орындау барысында мәнді өзгерту үшін пайдалануға болатын атаулы жад аймағы.",
                code: "#Синтаксис: айнымалыны жазу барысында біріншіден оған ат, ал одан соң теңдік белгісі (=) арқылы мән беріледі. Кейін бұл айнымалыны оның адрестік аты арқылы шақырып, ол сақтаған мәнімен белгілі бір операция орындалады. \\na = \"Hello,\" \\nb = \"World\" \\n#немесе \\nc, d = \"Hello,\", \"World\""
            },
        tutorials:
            [
                {
                    name: "Сандар (Numeric type)",
                    description: "Белгілі бір математикалық мәнді қабылдайтын деректер типі сандық тип деп аталады. Python үш түрлі сандық деректер типтерін қабылдайды: int, float, complex.",
                    syntax:
                        {
                            explanation: "Түсіндірме: int (Integer whole numbers) – бүтін сандар. \\nТүсіндірме: float (floating point numbers) – бөлшек сандар. \\nТүсіндірме: complex (complex numbers) – комплекстік сандар.",
                            code: "#Синтаксис: айнымалы нақтыланған сан ретінде жазылады. \\na = 7 \\n#Синтаксис: айнымалы нүкте арқылы оңдық қозғалатын нүктесі бар сан ретінде жазылады. \\nb = 7.0 \\n#Синтаксис: айнымалы i немесе j және екі сан комбинациясы ретінде жазылады. \\nc = 7 + 5j"
                        },
                },
                {
                    name: "Мәтін жолдар (Text Sequence type)",
                    description: "Айнымалы контекстінде бір толық ретінде қарастырылатын таңбалар тізбегін қабылдайтын деректер типі жолдар немесе мәтіндік тип деп аталады. Python-да ол str деп белгіленеді.",
                    syntax:
                        {
                            explanation: "Түсіндірме: str (Strings) – мәтіндік таңбалар жол-тізбегі.",
                            code: "#Синтаксис: апострофтар (') немесе тырнақшалар (\") ішінде кез-келген таңбалар жолы ретінде жазылады. \\nhello1 = 'Hello, World!' \\n#немесе \\nhello2 = \"Hello, World!\""
},
},
{
    name: "Логикалық айнымалылар (Boolean type)",
        description: "Информатикадағы ақиқат (true) және жалған (false) деген екі мәнді ғана қабылдайтын примитивті деректер түрі логикалық тип деп аталады. Python-да ол bool деп белгіленеді, ал басқа деректер типтерін bool түріне келтіру үшін келесі конвенцияларда жұмыс істейтін шарттары бар: \\n• Мәтін жолдар: бос жол - жалған, бос емес жол - ақиқат; \\n•	Сандар: нөлдік сан - жалған, нөлдік емес сан (оның ішінде 0-ден де кіші сандар) - ақиқат; \\n•	Тізімдер: бос тізім - жалған, бос емес - ақиқат; \\n•	Функциялар әрқашанда ақиқат. \\nЛогикалық тип келесі деректер типтерімен белгіленеді: \\n•	Мәтіндік жол: ақиқат үшін true, жалған үшін false; \\n•	Сандық: ақиқат үшін 1, жалған үшін 0.",
    syntax:
    {
        explanation: "Түсіндірме: bool (Boolean) – ақиқат немесе жалған деген мәндерді анықтайтын логикалық тип.",
            code: "#Синтаксис: true, false, 0, 1 немесе кез-келген логикалық өрнек мәлімдемесі жазылады. \\na = (10 > 5) #немесе true  \\nb = (10 < 5) #немесе false"
    },
},
{
    name: "type() функциясы және дерек типтерін түрлендіру",
        description: "Негізгі және ең қарапайым сандық, мәтіндік жол және логикалық деректер типтерінен басқа, Python тілінде тағы list, tuple, range деп белгіленетін тізімдер (Sequence type), dict деп белгіленетін сөздіктер (Mapping type), set, frozenset деп белгіленетін жиынтықтар (Set type), bytes, bytearray, memoryview деп белгіленетін бинарлы айнымалылар (Binary type) және NoneType деп белгіденетін анықтамалған айнымалылар (None type) бар. Бұл типтерді біз курстың кейінгі тақырыптарында қарастырамыз. \\nБелгілі бір айнымалының дерек типін анықтау үшін type() функциясын қолдануға болады. \\nАл int (), float (), str() және т. б. сияқты функцияларды қолдана отырып, мәндерді бір түрден екіншісіне түрлендіре аламыз.",
    syntax:
    {
        explanation: "Түсіндірме: type() – айнымалының дерек типін анықтайтын немесе түрлендіретін функция.",
            code: "#Синтаксис: Анықтау функция жақшасының ішіне айнымалы аты жазылу арқылы орындалады. \\na = 5.0 \\ntype(a) #< class ‘float’> \\n#Синтаксис: Түрлендіру де функция жақшасының ішіне айнымалы мәні жазылу арқылы орындалады. \\nfloat (5) #5.0 \\nint(10.6) #10 \\nfloat('2.5') #2.5 \\nstr(25) #'25'"
    },
}
]
},
{
    topic: "Операторлар.",
        description: "Бағдарламалауда айнымалылармен жұмыс жасау үшін оларға әртүрлі операциялар орындалады, оларға қарапайым қосу мен азайту да, күрделі логикалық мәлімдемелер де жатады. Осындай операцияларды орындау керек екенін бағдарламашы компьютерге арнайы таңбалар арқылы жеткізеді. Олар операторлар деп аталады. ",
    syntax:
    {
        explanation: "Түсіндірме: Оператор - бір немесе бірнеше операндтарға операция жасайтын таңба. Операнд-бұл операция орындалатын айнымалы немесе мән.",
        code: "#Синтаксис: операторлар кез-келген жағдайда, айнымалылар, мәндер немесе өрнектер жұбы бола алатын екі аргументтердің арасына жазылады және бағдарлама іске қосу барысында орындалып, бөлек мәнге айналады. \\n2+2 #мәні: 4 \\n1<0 #мәні: False \\na= 2 \\na+=3 #мәні: 5 \\n0 > 3 or 2 > 0 #мәні: True"
    },
    tutorials:
        [
            {
                name: "Арифметикалық операторлар",
                description: "Бұл түрге негізгі арифметикалық амалдарды орындауға арналған операторлар кіреді.",
                syntax:
                    {
                        explanation: "Түсіндірме: қосу ( + ) - оператордың екі жағындағы мәндерді қосады. \\nТүсіндірме: азайту ( - ) - оң жақтағы мәнді сол жақтағы мәннен алып тастайды. \\nТүсіндірме: көбейту ( * ) - оператордың екі жағындағы мәндерді көбейтеді. \\nТүсіндірме: бөлу ( / ) - сол жақтың мәнін оң жақтың мәніне бөледі. Бөлу нәтижесінің дерек типі - өзгермелі нүкте саны. \\nТүсіндірме: дәрежеге көтеру ( * * ) - бірінші санды екінші сан дәрежесіне көтереді. \\nТүсіндірме: қалдықсыз бөлу ( / / ) - бөлуді орындайды және ондық бөлшектен кейін сандарды алып тастап, бөлімнің бүтін мәнін қайтарады. \\nТүсіндірме: модуль бойынша бөлу (бөлудің қалдығы) ( % ) - бөлуді орындайды және қалдық мәнін қайтарады.",
                        code: "10+3 #13 \\n10-3 #7 \\n10*3 #30 \\n10/3 #3.33 \\n10**3 #1000 \\n10//3 #3 \\n10%3 #1"
                    },
            },
            {
                name: "Салыстыру операторлары",
                description: "Python - дағы салыстыру операторлары операндтарды салыстырады. Олар аргументтердің біреуі екіншісінен үлкен, кішірек немесе тең екенін bool арқылы тексеріп, true немесе false мәндерін қайтарады.",
                syntax:
                    {
                        explanation: "Түсіндірме: кем ( < ) - бұл оператор сол жақтағы мән оң жақтан аз екенін тексереді. \\nТүсіндірме: артық ( > ) - сол жақтағы мән оң жақтан үлкен екенін тексереді. \\nТүсіндірме: кем немесе тең ( < = ) - сол жақ бөліктің оң жақтан кіші немесе тең екендігін тексереді. \\nТүсіндірме: артық немесе тең ( > = ) - сол жақ бөліктің оң жақтан үлкен немесе тең екенін тексереді. \\nТүсіндірме: тең ( = = ) - бұл оператор сол жақтағы мәннің оңға тең екендігін тексереді.  \\nТүсіндірме: тең емес (!= ) - сол жақтағы мәннің оңға тең емес екенін тексереді.",
                        code: "4<3 #False \\n4>3 #True \\n7<=7 #True \\n0>=0 #True \\n3==3.0 #True \\n1!=1.0 #False"
                    },
            },
            {
                name: "Тағайындау операторлары",
                description: "Тағайындау операторы айнымалыға мән береді. Ол тағайындалғанға дейін мәнді басқара алады.",
                syntax:
                    {
                        explanation: "Түсіндірме: тағайындау ( = ) - сол жақ бөліктің оң жағына мән береді.  = = салыстыру үшін, ал = тағайындау үшін қолданылатынына мән беріңіздер. \\nТүсіндірме: қосу және тағайындау ( + = ) - екі жақтың мәнін қосып, оны сол жақтағы өрнекке тағайындайды. \\nТүсіндірме: азайту және тағайындау (-=) - оң жақтағы мәнді сол жақтан азайтып, оны сол жақтағы өрнекке тағайындайды. \\nТүсіндірме: көбейту және тағайындау (*=) - екі жақтың мәндерін көбейтеді, содан кейін оны сол жақтағы өрнекке тағайындайды. \\nТүсіндірме: бөлу және тағайындау ( / = ) - оң жақтағы мәнді сол жақтан бөледі, содан кейін оны сол жақтағы өрнекке тағайындайды. \\nТүсіндірме: дәрежеге көтеру және тағайындау ( * * = ) - сол жақ бөлікті оң жақ бөліктің мән дәрежесіне көтеруді жүзеге асырады, содан кейін сол жақ бөліктің мәнін тағайындайды. \\nТүсіндірме: қалдықсыз бөлу және тағайындау ( / / = ) - қалдықсыз бөлуді жүзеге асырады және нәтижені сол жаққа тағайындайды. \\nТүсіндірме: модуль бойынша бөлу және тағайындау ( % = ) - екі бөлік үшін де модуль бойынша бөлуді орындайды, ал нәтиже сол жаққа тағайындалады.",
                        code: "a = 7 #7 \\na += 2 #7+2 = 9 \\na -= 3 #9-3 = 6 \\na *= 4 #6 * 4 = 24 \\na /= 8 #24 / 8 = 3.0 \\na **= 3 #3-тің 3 дәрежесі = 27.0 \\na //= 2 #27 / 2 = 13 бүтін \\na %= 5 #13/5 = 3 қалдық"
                    },
            },
            {
                name: "Логикалық операторлар",
                description: "Бұл бірнеше шарттарды біріктіруге мүмкіндік беретін байланыс операторлары.",
                syntax:
                    {
                        explanation: "Түсіндірме: және (and) - егер and операторының екі жағындағы шарттар ақиқат болса, онда бүкіл өрнек толығымен ақиқат болып саналады. \\nТүсіндірме: немесе (or) - егер екі операндтың екеуі де жалған болса, өрнек жалған, егер олардың кем дегенде біреуі ақиқат болса, онда бүкіл өрнек ақиқат. \\nТүсіндірме: емес (not) - бұл оператор өрнектің логикалық мәндерін өзгертеді. True False-қа айналады және керісінше.",
                        code: "a = 7 > 7 and 2 > -1 #False \\na = 7 > 7 or 2 > -1 #True \\na = not(0) #True"
                    },
            }
        ]
},
{
    topic:"Шарттар",
        description:"Бағдарламалауда айнымалылар мен операторлардан шынымен күрделі алгоритм құру үшін, бұл алгоритм тек көп қадамдардан тұрмай, орындалу барысында тармақталу қажет. Бұндай көп тармақты алгоритмды шарт қою арқылы құрайды, ал нәтижесінде көп вариантты бағдарлама шығады. \\nЖалпы бағдарламалауда шарттар логикалық деректер пен олардың ықтималдық жинағы ретінде жазылады. Python тілінде ол үшін if, elif және else деген шартты операторлар қолданылады.",
    tutorials:
    [
        {
            name: "if, elif және else",
            description: "Көп тілдерде, шарттар if деген оператор арқылы орындалады. Бұл оператор арқылы алгоритмде бірінші тармақ құрылып, ақиқат немесе жалған деген екі ықтималды бөліктерден екі түрлі орындалу жолы ашылады. Шарттар саны алгоритмге тәуелді шексіз болуы мүмкін, бірақ бірінші if шартынан кейін басқа қойылған шарттар elif(else if) деген оператор арқылы орындалады. Бір және одан да көп шарттардың біреуі ақиқат болса, бағдарлама өзінің жұмысын сол тармақтан жалғастырады. Егер шарттардың ещқайсысы орындалмаса, онда else операторы іске қосылып, алгоритм осы соңғы тармақтан кейін жүреді.",
            syntax:
                {
                    explanation:"Түсіндірме: if – шарт қою операторы. \\nelif(else if) – одан бұрынғы шарт орындалмаған жағдайда тағы бір шарт қоюға мүмкіндік беретін оператор. \\nelse – одан бұрын қойылған шарттардың ешқайсысы орындалмаған жағдайдағы іске қосылатын оператор.",
                    code:"a = 10 \\n#Синтаксис: оператордан кейін шарт қойылады және ең соңына екі нүкте (:), ал бұл блокқа кіретін операциялар оператор бағанынан бір бос орын қалдыру арқылы жазылады. Егер оның мәні «ақиқат» болса, онда бағдарлама осы жерден жалғасады. \\nif a == 5 + 7: #False  \\    nprint('First') \\n#Синтаксис: оператордан кейін шарт қойылады және ең соңына екі нүкте (:), ал бұл блокқа кіретін операциялар оператор бағанынан бір бос орын қалдыру арқылы жазылады. Егер одан бұрынғы шарттың мәні «жалған», ал осы шарттың мәні  «ақиқат» болса, онда бағдарлама осы жерден жалғасады. \\nelif a == 10/2: #False  \\n    print('Second')  #Синтаксис: оператор тек өзі жазылады және ең соңына екі нүкте (:), ал бұл блокқа кіретін операциялар оператор бағанынан бір бос орын қалдыру арқылы жазылады. Егер одан бұрынғы шарттардың мәндері «жалған» болса, онда бағдарлама осы жерден жалғасады. \\nelse: #True \\n    print('Third') \\n#Бағдарлама нәтижесінде 'Third' жазуы шығады, себебі тек төртінші шарттың нәтижесі орындалды"
                },
        }
    ]
},

{
    topic: "Циклдер",
        description: "IT саласының ең басты мақсаттарының бірі – автоматтандыру. Ол процесс арқылы біз көптеген қайталанатын жұмыстарды максималды ыңғайлықпен орындай аламыз. Сондай автоматтандыру процессін құру үшін циклдер қолданылады. \\nЦикл – белгілі бір шарт орындалған жағдайдағы шексіз жүре алатын итерация жиынтығы. Итерация – цикл бір рет айналып, орындалған операциясы.",
    tutorials:
    [
        {
            name: "while",
            description: "Шарт тақырыбынан алыс кетпей, біз while циклін қарастырамыз. Егер оның логикалық мәні «ақиқат» болса, цикл басталады немесе жалғасады, ал егер «жалған» болса, цикл тоқталады немесе мүлдем жүрмейді.",
            syntax:
                {
                    explanation: "Түсіндірме: while - while белгілі бір шартты тексеріп, бұл шарт «ақиқат» болғанша цикл нұсқауларын орындайтын цикл операторы",
                    code: "#Синтаксис: оператордан кейін шарт қойылады және ең соңына екі нүкте (:), ал бұл блокқа кіретін операциялар оператор бағанынан бір бос орын қалдыру арқылы жазылады. Егер оның мәні «ақиқат» болса, бағдарлама ол мән «жалған» болып ауыспағанша шексіз түрде орындала береді. \\na = 0 \\nwhile a <= 5: \\n    print(a) \\n    a += 1 \\#Айнымалы 5-ке тең болмағанша, әр итерация сайын ол 1-ге артады. Мән 5-ке жеткенде ғана цикл тоқтайды "
                },
        },
        {
            name: "for",
            description: "Python тілінде, while циклінен басқа тағы for деген оператор қолданылады. Егер операция логикалық мәндер жолымен шешілмесе, оны айнымалылар жолымен де шешуге болады. Бұл цикл мәндер жиынтығында жүріп, әр мәнді айнымалыға орналастырады, бұл процесс қарапайым есептегіш принципімен жұмыс істейді. \\nБұл цикл типіне міндетті түрде range() функциясы арқылы берілетін орындалу шегі керек.",
            syntax:
                {
                    explanation: "Түсіндірме: for - белгілі бәр мән жиынтығымен жүргізілетін, айнымалы керек мәнге жеткенше орындайтын цикл операторы. ",
                    code: "#Синтаксис: for кілт сөзінен кейін мәндер тіркелетін айнымалының атауы, in операторы, range() функциясындағы жақша ішіне шектелген мәндер жиынтығы және қос нүкте көрсетіледі, ал келесі жолдан цикл блогы орналасады, олар да цикл бағанынан бос жолда орналасау керек. Цикл орындалған кезде жиынтықтағы барлық мәндер қарастырылып, олар айнымалыға тіркеледі. Жиынтықтағы барлық мәндер қайталанғаннан кейін цикл өз жұмысын аяқтайды. \\na = 10 \\nfor b in range(a): \\n    print(b) \\n#b мәні a мәніне тең болмағанша, оған бір қосылып, жаңа мән тіркеле береді"
                },
        },
        {
            name: "break және continue",
            description: "Циклдар түрлі шарттардың орындау айналымы болғандықтан, бұл айнымалыны белгілі бір мәзірде тоқтап, оларға операция қолданып, қайттан  іске қосуға мүмкіндік болу керек. Python тілінде ол үшін тоқтау (break) және жалғастыру (continue) деген командалар қолданылады.",
            syntax:
                {
                    explanation: "Түсіндірме: break - белгілі циклді керек кезде тоқтатуға мүмкіндік беретін опертаор. \\nТүсіндірме: continue - тоқтатылған циклді жалғастыратын немесе келесі итерацияны іске қосатын оператор. ",
                    code: "#Синтаксис: оператор цикл блогының ішіне жаңа бос жолдан жазылады. \\na = 0 \\nwhile a < 5: \\n    a += 1\\n    if a == 3 : \\n        break\\n#a мәні 5-ке тең болмағанша, цикл орындала береді, бірақ ол 3 тең болғанда,цикл тоқтайды. \\n#Синтаксис: оператор цикл блогының ішіне жаңа бос жолдан жазылады. \\na = 0 \\nwhile a < 5: \\n    a += 1\\n    if a == 3 : \\n        continue\\n#a мәні 5-ке тең болмағанша, цикл орындала береді, бірақ ол 3 тең болғанда, цикл бір айналымды бітірмей, келесі итерацияға көшеді."
                }
        }
    ]
},



]

function App() {

    const location = useLocation();
    const [currentTopicIndex, setCurrentTopicIndex] = useState(0)
    const [isShowing, setIsShowing] = useState(true)


    return (
        <div>

            {
                location.pathname !== "/login" && location.pathname !== "/register" &&
                <div>

                    <TopBar currentPath={location.pathname} setIsShowing={setIsShowing} isShowing={isShowing}/>
                    <div style={{marginTop: "50px"}}/>
                </div>
            }

            <Routes>
                <Route path="/" element={<HomePage/>}/>
                <Route path="/login" element={<LoginPage/>}/>
                <Route path="/register" element={<RegisterPage/>}/>
                <Route path="/tutorials"
                       element={<TutorialsPage courses={courses} setCurrentTopicIndex={setCurrentTopicIndex}/>}/>
                <Route path="/topic" element={<TopicPage courses={courses} currentTopicIndex={currentTopicIndex}
                                                         setCurrentTopicIndex={setCurrentTopicIndex}
                                                         isShowing={isShowing} setIsShowing={setIsShowing}/>}/>
                <Route path="*" element={<NotfoundPage/>}/>
            </Routes>


        </div>
    )
}

export default App